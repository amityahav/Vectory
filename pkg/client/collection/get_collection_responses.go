// Code generated by go-swagger; DO NOT EDIT.

package collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"Vectory/pkg/models"
)

// GetCollectionReader is a Reader for the GetCollection structure.
type GetCollectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCollectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCollectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCollectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCollectionOK creates a GetCollectionOK with default headers values
func NewGetCollectionOK() *GetCollectionOK {
	return &GetCollectionOK{}
}

/*GetCollectionOK handles this case with default header values.

valid operation
*/
type GetCollectionOK struct {
	Payload *models.Collection
}

func (o *GetCollectionOK) Error() string {
	return fmt.Sprintf("[GET /v1/collection/{collectionName}][%d] getCollectionOK  %+v", 200, o.Payload)
}

func (o *GetCollectionOK) GetPayload() *models.Collection {
	return o.Payload
}

func (o *GetCollectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Collection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionBadRequest creates a GetCollectionBadRequest with default headers values
func NewGetCollectionBadRequest() *GetCollectionBadRequest {
	return &GetCollectionBadRequest{}
}

/*GetCollectionBadRequest handles this case with default header values.

Invalid collection name
*/
type GetCollectionBadRequest struct {
}

func (o *GetCollectionBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/collection/{collectionName}][%d] getCollectionBadRequest ", 400)
}

func (o *GetCollectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
