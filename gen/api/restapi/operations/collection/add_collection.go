// Code generated by go-swagger; DO NOT EDIT.

package collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddCollectionHandlerFunc turns a function with the right signature into a add collection handler
type AddCollectionHandlerFunc func(AddCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddCollectionHandlerFunc) Handle(params AddCollectionParams) middleware.Responder {
	return fn(params)
}

// AddCollectionHandler interface for that can handle valid add collection params
type AddCollectionHandler interface {
	Handle(AddCollectionParams) middleware.Responder
}

// NewAddCollection creates a new http.Handler for the add collection operation
func NewAddCollection(ctx *middleware.Context, handler AddCollectionHandler) *AddCollection {
	return &AddCollection{Context: ctx, Handler: handler}
}

/*AddCollection swagger:route POST /v1/collection collection addCollection

Add a collection to the database

Add a new collection to the database

*/
type AddCollection struct {
	Context *middleware.Context
	Handler AddCollectionHandler
}

func (o *AddCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
