// Code generated by go-swagger; DO NOT EDIT.

package collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteCollectionHandlerFunc turns a function with the right signature into a delete collection handler
type DeleteCollectionHandlerFunc func(DeleteCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCollectionHandlerFunc) Handle(params DeleteCollectionParams) middleware.Responder {
	return fn(params)
}

// DeleteCollectionHandler interface for that can handle valid delete collection params
type DeleteCollectionHandler interface {
	Handle(DeleteCollectionParams) middleware.Responder
}

// NewDeleteCollection creates a new http.Handler for the delete collection operation
func NewDeleteCollection(ctx *middleware.Context, handler DeleteCollectionHandler) *DeleteCollection {
	return &DeleteCollection{Context: ctx, Handler: handler}
}

/*DeleteCollection swagger:route DELETE /v1/collection/{collectionName} collection deleteCollection

Delete a collection from the database

Delete a collection from the database

*/
type DeleteCollection struct {
	Context *middleware.Context
	Handler DeleteCollectionHandler
}

func (o *DeleteCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
